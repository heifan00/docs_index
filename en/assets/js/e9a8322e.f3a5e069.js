"use strict";(self.webpackChunkhif_icu=self.webpackChunkhif_icu||[]).push([[2310],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>y});var r=i(7294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,r,t=function(e,n){if(null==e)return{};var i,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var o=r.createContext({}),g=function(e){var n=r.useContext(o),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},c=function(e){var n=g(e.components);return r.createElement(o.Provider,{value:n},e.children)},d="mdxType",S={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var i=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=g(i),u=t,y=d["".concat(o,".").concat(u)]||d[u]||S[u]||a;return i?r.createElement(y,l(l({ref:n},c),{},{components:i})):r.createElement(y,l({ref:n},c))}));function y(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=i.length,l=new Array(a);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[d]="string"==typeof e?e:t,l[1]=s;for(var g=2;g<a;g++)l[g]=i[g];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}u.displayName="MDXCreateElement"},5545:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>S,frontMatter:()=>a,metadata:()=>s,toc:()=>g});var r=i(7462),t=(i(7294),i(3905));const a={title:"Redis\u5de5\u5177\u7c7b\u5c01\u88c5",tags:["Redis"],categories:["Java"],date:new Date("2021-12-20T20:21:34.000Z"),urlname:"redis_cache_service",top:null,slug:"/redis_cache_service"},l=void 0,s={unversionedId:"\u539f\u535a\u5ba2\u6587\u4ef6/Redis\u5de5\u5177\u7c7b\u5c01\u88c5",id:"\u539f\u535a\u5ba2\u6587\u4ef6/Redis\u5de5\u5177\u7c7b\u5c01\u88c5",title:"Redis\u5de5\u5177\u7c7b\u5c01\u88c5",description:"\u6458\u8981",source:"@site/docs/\u539f\u535a\u5ba2\u6587\u4ef6/Redis\u5de5\u5177\u7c7b\u5c01\u88c5.md",sourceDirName:"\u539f\u535a\u5ba2\u6587\u4ef6",slug:"/redis_cache_service",permalink:"/en/redis_cache_service",draft:!1,tags:[{label:"Redis",permalink:"/en/tags/redis"}],version:"current",frontMatter:{title:"Redis\u5de5\u5177\u7c7b\u5c01\u88c5",tags:["Redis"],categories:["Java"],date:"2021-12-20T20:21:34.000Z",urlname:"redis_cache_service",top:null,slug:"/redis_cache_service"},sidebar:"tutorialSidebar",previous:{title:"MySQL\u7d22\u5f15",permalink:"/en/mysql_index"},next:{title:"ThreadLocal",permalink:"/en/threadlocal"}},o={},g=[{value:"\u6458\u8981",id:"\u6458\u8981",level:3},{value:"\u96be\u70b9",id:"\u96be\u70b9",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"1. RedisCacheServiceI",id:"1-rediscacheservicei",level:4},{value:"2. RedisCacheServiceImpl",id:"2-rediscacheserviceimpl",level:4}],c={toc:g},d="wrapper";function S(e){let{components:n,...i}=e;return(0,t.kt)(d,(0,r.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h3",{id:"\u6458\u8981"},"\u6458\u8981"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u8be5\u5de5\u5177\u7c7b\u662f\u5927\u4f6c\u572820\u5e74\u7f16\u5199\u7684"),(0,t.kt)("li",{parentName:"ul"},"\u6211\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u5c11\u4e86hMGet\u65b9\u6cd5"),(0,t.kt)("li",{parentName:"ul"},"\u6240\u4ee5\u5c31\u7167\u846b\u82a6\u753b\u74e2\uff0c\u5199\u4e86hMGet\u65b9\u6cd5"),(0,t.kt)("li",{parentName:"ul"},"\u4e0d\u4f7f\u7528RedisTemplate\u5c01\u88c5\u7684\u65b9\u6cd5\u662f\u56e0\u4e3a\u4e0d\u60f3\u7528\uff08\u5927\u4f6c\u8bf4\u6709bug\uff09"),(0,t.kt)("li",{parentName:"ul"},"\u81ea\u5df1\u5c01\u88c5\uff0c\u7528\u8d77\u6765\u5c82\u4e0d\u662f\u66f4\u725b\u903c\uff1f")),(0,t.kt)("h3",{id:"\u96be\u70b9"},"\u96be\u70b9"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u5e8f\u5217\u5316")),(0,t.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,t.kt)("h4",{id:"1-rediscacheservicei"},"1. RedisCacheServiceI"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},"import com.weliner.business.config.domain.Search;\nimport com.weliner.business.config.utils.SortTypeEnum;\nimport org.springframework.data.redis.connection.RedisZSetCommands;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author ****.coding@gmail.com\n * @date 2020-08-31\n **/\npublic interface RedisCacheServiceI {\n\n    /**\n     * \u67e5\u627e\u6240\u6709\u7b26\u5408\u7ed9\u5b9a\u6a21\u5f0f pattern \u7684 key \uff0c \u6bd4\u5982\u8bf4\uff1a\n     * KEYS * \u5339\u914d\u6570\u636e\u5e93\u4e2d\u6240\u6709 key \u3002\n     * KEYS h?llo \u5339\u914d hello \uff0c hallo \u548c hxllo \u7b49\u3002\n     * KEYS h*llo \u5339\u914d hllo \u548c heeeeello \u7b49\u3002\n     * KEYS h[ae]llo \u5339\u914d hello \u548c hallo \uff0c\u4f46\u4e0d\u5339\u914d hillo \u3002\n     * \u7279\u6b8a\u7b26\u53f7\u7528 \\ \u9694\u5f00\u3002\n     * {@link = http://redisdoc.com/database/keys.html}\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.0.0\n     * \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(N)\uff0c N \u4e3a\u6570\u636e\u5e93\u4e2d key \u7684\u6570\u91cf\u3002\n     *\n     * @param pattern\n     * @return\n     */\n    Set<String> keys(String pattern);\n\n    /**\n     * \u68c0\u67e5key\u662f\u5426\u5b58\u5728\n     * {@link = http://redisdoc.com/database/exists.html}\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.0.0\n     * \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(1)\n     *\n     * @param key\n     * @return\n     */\n    Boolean exists(String key);\n\n    /**\n     * \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n     * @param redisKey\n     * @param expire\n     * @param timeUnit\n     * @return\n     */\n    Boolean expire(String redisKey, long expire, TimeUnit timeUnit);\n\n    /**\n     * \u8bbe\u7f6e\u8fc7\u671f\u7684\u5b57\u7b26\u4e32\n     *\n     * @param key\n     * @param value\n     * @param timeout\n     * @return\n     */\n    Boolean setStr(String key, String value, Long timeout);\n\n    /**\n     * \u8bbe\u7f6evalue\u81ea\u589e\u6570\u91cf\n     * @param key\n     * @return\n     */\n    Long increment(String key);\n\n    /**\n     * \u8bbe\u7f6e\u4e0d\u8fc7\u671f\u7684\u5b57\u7b26\u4e32\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    Boolean setStr(String key, String value);\n\n\n    /**\n     * \u83b7\u53d6\u5b57\u7b26\u4e32key\u7684value\n     *\n     * @param key\n     * @return\n     */\n    String getStr(String key);\n\n    /**\n     * \u83b7\u53d6\u5b57\u7b26\u4e32key\u7684value\n     * @param key\n     * @param clazz\n     * @param <T>\n     * @return\n     */\n    <T> T getStr(String key, Class<T> clazz);\n\n    /**\n     *\n     * @param list\n     * @param clazz\n     * @param <T>\n     * @param <R>\n     * @return\n     */\n    <T, R> List<T> mGet(List<R> list, Class<T> clazz);\n\n    /**\n     * \u6839\u636ekey\u5220\u9664\u7f13\u5b58\n     *\n     * @param key\n     * @return\n     */\n    Long del(String key);\n\n    /**\n     * \u5224\u65admember\u662f\u5426\u5728set\u4e2d\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    Boolean sIsMember(String key, String value);\n\n    /**\n     * \u83b7\u53d6set \u4e2d\u7684\u5143\u7d20\n     *\n     * @param key\n     * @return\n     */\n    Long sCard(String key);\n\n    /**\n     * set \u65b0\u589evalue\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    Boolean sAdd(String key, String values);\n\n    /**\n     * set \u79fb\u9664value\n     *\n     * @param key\n     * @param values\n     * @return\n     */\n    Boolean sRem(String key, String values);\n\n    /**\n     * hmSet\n     *\n     * @param key\n     * @param m\n     */\n    void hSet(String key, Map m);\n\n    Boolean hSet(final String key, final String field, final String value);\n\n    Boolean hExists(final String key, final String field);\n\n    <T> T hGet(String key, String hashKey, Class<T> clazz);\n\n    /**\n     * hget\n     *\n     * @param key\n     * @param hashKey\n     * @return\n     */\n    Object hGet(String key, String hashKey);\n\n    /**\n     * \u6279\u91cf\u83b7\u53d6HASH\n     * @Author HiF\n     * @Date 2021/6/25 16:38\n     * @return\n     */\n    <T> List<T> hMGet(String key, List<String> fields, Class<T> clazz);\n\n    Boolean zAdd(final String key, final double score, final String value);\n\n    Long zAdd(final String key, Set<RedisZSetCommands.Tuple> tuples);\n\n    Double zScore(final String key, final String value);\n\n    Double zIncrBy(final String key, final double increment, final String value);\n\n    Long zCard(final String key);\n\n    Long zCount(final String key, final RedisZSetCommands.Range range);\n\n    <T> Set<T> zRange(final String key, final long start, final long end, Class<T> clazz);\n\n    Set<byte[]> zRange(final String key, final long start, final long end);\n\n    Set<byte[]> zRevRange(final String key, final long start, final long end);\n\n    Set<byte[]> zRangeByScore(final String key, final double min, final double max);\n\n    Set<RedisZSetCommands.Tuple> zRangeWithScores(final String key, final long start, final long end);\n\n    Set<RedisZSetCommands.Tuple> zRevRangeWithScores(final String key, final long start, final long end);\n\n    Set<byte[]> zRevRangeByScore(final String key, final double min, final double max);\n\n    Set<byte[]> zRevRangeByScore(final String key, final double min, final double max, long offset, long count);\n\n    Set<RedisZSetCommands.Tuple> zRangeWithScores(final String key, final double min, final double max, long offset, long count);\n\n    Long zRank(final String key, final String value);\n\n    Long zRevRank(final String key, final double score, final String value);\n\n    Long zRem(final String key, final String value);\n\n    Long zMRem(final String key, final List<String> fields);\n\n    Long zRemRangeByScore(final String key, final RedisZSetCommands.Range range);\n\n    Set<byte[]> zRangeByLex(final String key, final RedisZSetCommands.Range range);\n\n    Long zUnionStore(final String destKey, List<String> sets);\n\n    Long zInterStore(final String destKey, final byte[]... sets);\n\n    <T> Search zSetSearchPage(String key, SortTypeEnum sortTypeEnum, int pageSize, int pageIndex, Class<T> clazz);\n}\n")),(0,t.kt)("h4",{id:"2-rediscacheserviceimpl"},"2. RedisCacheServiceImpl"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},"import com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.weliner.business.config.domain.Search;\nimport com.weliner.business.config.manager.RedisCacheServiceI;\nimport com.weliner.business.config.utils.JsonTool;\nimport com.weliner.business.config.utils.SortTypeEnum;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.data.redis.connection.RedisConnection;\nimport org.springframework.data.redis.connection.RedisZSetCommands;\nimport org.springframework.data.redis.core.RedisCallback;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.TimeoutUtils;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\n\n/**\n * @author ****.coding@gmail.com\n **/\n@Service\n@Slf4j\npublic class RedisCacheServiceImpl implements RedisCacheServiceI {\n\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    @Override\n    public Set<String> keys(String pattern) {\n        return (Set<String>) redisTemplate.execute((RedisCallback<Set<String>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer = redisTemplate.getStringSerializer();\n            Set<byte[]> sets = connection.keys(stringRedisSerializer.serialize(pattern));\n            Set<String> keys = new LinkedHashSet<>();\n            if (null == sets) {\n                return keys;\n            }\n            sets.forEach(item -> keys.add(stringRedisSerializer.deserialize(item)));\n            return keys;\n        });\n    }\n\n    @Override\n    public Boolean exists(String key) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer<String> stringRedisSerializer = redisTemplate.getStringSerializer();\n            return connection.exists(stringRedisSerializer.serialize(key));\n        });\n    }\n\n    @Override\n    public Boolean expire(String redisKey, long expire, TimeUnit timeUnit) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer<String> stringRedisSerializer = redisTemplate.getStringSerializer();\n            long rawTimeout = TimeoutUtils.toMillis(expire, timeUnit);\n            return connection.pExpire(stringRedisSerializer.serialize(redisKey), rawTimeout);\n        });\n    }\n\n    @Override\n    public Boolean setStr(String key, String value, Long timeout) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer stringSerializer = redisTemplate.getStringSerializer();\n            return connection.setEx(\n                    stringSerializer.serialize(key),\n                    timeout,\n                    stringSerializer.serialize(value));\n        });\n    }\n\n    @Override\n    public Long increment(String key) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringSerializer = redisTemplate.getStringSerializer();\n            return connection.incr(stringSerializer.serialize(key));\n        });\n    }\n\n\n    @Override\n    public Boolean setStr(String key, String value) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer stringSerializer = redisTemplate.getStringSerializer();\n            return connection.set(\n                    stringSerializer.serialize(key),\n                    stringSerializer.serialize(value));\n        });\n    }\n\n    @Override\n    public String getStr(String key) {\n        return (String) redisTemplate.execute((RedisCallback<String>) connection -> {\n            RedisSerializer stringSerializer = redisTemplate.getStringSerializer();\n            byte[] value = connection.get(\n                    stringSerializer.serialize(key));\n            return (String) stringSerializer.deserialize(value);\n        });\n    }\n\n    @Override\n    public <T> T getStr(String key, Class<T> clazz) {\n        return (T) redisTemplate.execute((RedisCallback<T>) connection -> {\n            RedisSerializer<String> stringRedisSerializer = redisTemplate.getStringSerializer();\n            byte[] bytes = connection.get(stringRedisSerializer.serialize(key));\n            if (null == bytes) {\n                return null;\n            }\n            String json = stringRedisSerializer.deserialize(bytes);\n            if (null == json) {\n                return null;\n            }\n            Gson gson = new Gson();\n            return gson.fromJson(json, clazz);\n        });\n    }\n\n    @Override\n    public <T, R> List<T> mGet(List<R> list, Class<T> clazz) {\n        return (List<T>) redisTemplate.execute((RedisCallback<List<T>>) connection -> {\n            byte[][] bkeys = new byte[list.size()][];\n            for (int i = 0; i < list.size(); i++) {\n                bkeys[i] = list.get(i).toString().getBytes();\n            }\n            RedisSerializer<String> stringRedisSerializer = redisTemplate.getStringSerializer();\n            List<byte[]> byteList = connection.mGet(bkeys);\n            List<T> result = new ArrayList<>();\n            Gson gson = new Gson();\n            for (int i = 0; i < byteList.size(); i++) {\n                result.add(gson.fromJson(stringRedisSerializer.deserialize(byteList.get(i)), clazz));\n            }\n            return result;\n\n        });\n    }\n\n\n    @Override\n    public Long del(String key) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringSerializer = redisTemplate.getStringSerializer();\n            return connection.del(\n                    stringSerializer.serialize(key));\n        });\n    }\n\n    @Override\n    public Boolean sIsMember(String key, String value) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer stringRedisSerializer = redisTemplate.getStringSerializer();\n            return connection.sIsMember(stringRedisSerializer.serialize(key),\n                    stringRedisSerializer.serialize(value));\n        });\n    }\n\n    @Override\n    public Long sCard(String key) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringRedisSerializer = redisTemplate.getStringSerializer();\n            return connection.sCard(stringRedisSerializer.serialize(key));\n        });\n    }\n\n    @Override\n    public Boolean sAdd(String key, String values) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer stringRedisSerializer = redisTemplate.getStringSerializer();\n            Long result = connection.sAdd(stringRedisSerializer.serialize(key), stringRedisSerializer.serialize(values));\n            if (null == result || result == 0) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    @Override\n    public Boolean sRem(String key, String values) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer stringRedisSerializer = redisTemplate.getStringSerializer();\n            Long result = connection.sRem(stringRedisSerializer.serialize(key), stringRedisSerializer.serialize(values));\n            if (null == result || result == 0) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    @Override\n    public void hSet(String key, Map map) {\n        redisTemplate.execute((RedisCallback) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            Iterator<Map.Entry<String, Object>> iterator = map.entrySet().iterator();\n            String mapKey;\n            Object value;\n            Map<byte[], byte[]> hashes = new LinkedHashMap(map.size());\n            while (iterator.hasNext()) {\n                Map.Entry<String, Object> entry = iterator.next();\n                mapKey = entry.getKey();\n                value = entry.getValue();\n                hashes.put(stringRedisSerializer.serialize(mapKey),\n                        stringRedisSerializer.serialize(JsonTool.toString(value)));\n            }\n            connection.hMSet(stringRedisSerializer.serialize(key),\n                    hashes\n            );\n            return null;\n        });\n    }\n\n    @Override\n    public Object hGet(String key, String hashKey) {\n        return redisTemplate.execute((RedisCallback) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] bytes = connection.hGet(stringRedisSerializer.serialize(key),\n                    stringRedisSerializer.serialize(hashKey));\n            if (null == bytes) {\n                return null;\n            }\n            return stringRedisSerializer.deserialize(bytes);\n        });\n    }\n\n    @Override\n    public <T> List<T> hMGet(String key, List<String> fields, Class<T> clazz) {\n        return (List<T>) redisTemplate.execute((RedisCallback<List<T>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[][] bkeys = new byte[fields.size()][];\n            for (int i = 0; i < fields.size(); i++) {\n                bkeys[i] = fields.get(i).toString().getBytes();\n            }\n            byte[] keys = stringRedisSerializer.serialize(key);\n            List<byte[]> listByte = connection.hMGet(keys, bkeys);\n            List<T> result = new ArrayList<>();\n            Gson gson = new Gson();\n            for (int i = 0; i < listByte.size(); i++) {\n                result.add(gson.fromJson(stringRedisSerializer.deserialize(listByte.get(i)), clazz));\n            }\n            return result;\n        });\n    }\n\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.0.0\n     * \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(1)\n     * \u5c06\u54c8\u5e0c\u8868 hash \u4e2d\u57df field \u7684\u503c\u8bbe\u7f6e\u4e3a value \u3002\n     * \u5982\u679c\u7ed9\u5b9a\u7684\u54c8\u5e0c\u8868\u5e76\u4e0d\u5b58\u5728\uff0c \u90a3\u4e48\u4e00\u4e2a\u65b0\u7684\u54c8\u5e0c\u8868\u5c06\u88ab\u521b\u5efa\u5e76\u6267\u884c HSET \u64cd\u4f5c\u3002\n     * \u5982\u679c\u57df field \u5df2\u7ecf\u5b58\u5728\u4e8e\u54c8\u5e0c\u8868\u4e2d\uff0c \u90a3\u4e48\u5b83\u7684\u65e7\u503c\u5c06\u88ab\u65b0\u503c value \u8986\u76d6\u3002\n     *\n     * @param key\n     * @param field\n     * @param value\n     * @return Boolean\n     * @Title: hSet\n     */\n    @Override\n    public Boolean hSet(final String key, final String field, final String value) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keys = stringRedisSerializer.serialize(key);\n            byte[] fields = stringRedisSerializer.serialize(field);\n            byte[] values = stringRedisSerializer.serialize(value);\n            return connection.hSet(keys, fields, values);\n        });\n    }\n\n\n    @Override\n    public Boolean hExists(final String key, final String field) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keys = stringRedisSerializer.serialize(key);\n            byte[] fields = stringRedisSerializer.serialize(field);\n            return connection.hExists(keys, fields);\n        });\n    }\n\n    @Override\n    public <T> T hGet(String key, String hashKey, Class<T> clazz) {\n        return (T) redisTemplate.execute((RedisCallback<T>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] bytes = connection.hGet(stringRedisSerializer.serialize(key),\n                    stringRedisSerializer.serialize(hashKey));\n            String json = stringRedisSerializer.deserialize(bytes);\n            if (null == json) {\n                return null;\n            }\n            Gson gson = new Gson();\n            return gson.fromJson(json, clazz);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(M*log(N))\uff0c N \u662f\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c M \u4e3a\u6210\u529f\u6dfb\u52a0\u7684\u65b0\u6210\u5458\u7684\u6570\u91cf\u3002 \u5c06\u4e00\u4e2a\u6216\u591a\u4e2a member\n     * \u5143\u7d20\u53ca\u5176 score \u503c\u52a0\u5165\u5230\u6709\u5e8f\u96c6 key \u5f53\u4e2d\u3002 \u5982\u679c\u67d0\u4e2a member \u5df2\u7ecf\u662f\u6709\u5e8f\u96c6\u7684\u6210\u5458\uff0c\u90a3\u4e48\u66f4\u65b0\u8fd9\u4e2a member \u7684 score\n     * \u503c\uff0c\u5e76\u901a\u8fc7\u91cd\u65b0\u63d2\u5165\u8fd9\u4e2a member \u5143\u7d20\uff0c\u6765\u4fdd\u8bc1\u8be5 member \u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002 score \u503c\u53ef\u4ee5\u662f\u6574\u6570\u503c\u6216\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002 \u5982\u679c key\n     * \u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u6709\u5e8f\u96c6\u5e76\u6267\u884c ZADD \u64cd\u4f5c\u3002 \u5f53 key \u5b58\u5728\u4f46\u4e0d\u662f\u6709\u5e8f\u96c6\u7c7b\u578b\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n     *\n     * @param key\n     * @param score\n     * @param value\n     * @return\n     */\n    @Override\n    public Boolean zAdd(final String key, final double score, final String value) {\n        return (Boolean) redisTemplate.execute((RedisCallback<Boolean>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            byte[] valueByte = stringRedisSerializer.serialize(value);\n            Boolean zAdd = connection.zAdd(keyByte, score, valueByte);\n            if (zAdd == false) {\n                // \u517c\u5bb9value\u3001score\u76f8\u540c\u7684\u60c5\u51b5\u4e5f\u4f1a\u8fd4\u56defalse\n                Double zScore = connection.zScore(keyByte, valueByte);\n                if (null != zScore) {\n                    return true;\n                }\n            }\n            return zAdd;\n        });\n    }\n\n    @Override\n    public Long zAdd(final String key, Set<RedisZSetCommands.Tuple> tuples) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zAdd(keyByte, tuples);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(1) \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\uff0c\u6210\u5458 member \u7684 score \u503c\u3002 \u5982\u679c member \u5143\u7d20\u4e0d\u662f\u6709\u5e8f\u96c6\n     * key \u7684\u6210\u5458\uff0c\u6216 key \u4e0d\u5b58\u5728\uff0c\u8fd4\u56de nil \u3002\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    @Override\n    public Double zScore(final String key, final String value) {\n        return (Double) redisTemplate.execute((RedisCallback<Double>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            byte[] valueByte = stringRedisSerializer.serialize(value);\n            return connection.zScore(keyByte, valueByte);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)) \u4e3a\u6709\u5e8f\u96c6 key \u7684\u6210\u5458 member \u7684 score \u503c\u52a0\u4e0a\u589e\u91cf increment \u3002\n     * \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u8d1f\u6570\u503c increment \uff0c\u8ba9 score \u51cf\u53bb\u76f8\u5e94\u7684\u503c\uff0c\u6bd4\u5982 ZINCRBY key -5 member \uff0c\u5c31\u662f\u8ba9 member \u7684\n     * score \u503c\u51cf\u53bb 5 \u3002 \u5f53 key \u4e0d\u5b58\u5728\uff0c\u6216 member \u4e0d\u662f key \u7684\u6210\u5458\u65f6\uff0c ZINCRBY key increment member\n     * \u7b49\u540c\u4e8e ZADD key increment member \u3002 \u5f53 key \u4e0d\u662f\u6709\u5e8f\u96c6\u7c7b\u578b\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002 score \u503c\u53ef\u4ee5\u662f\u6574\u6570\u503c\u6216\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\n     *\n     * @param key\n     * @param increment\n     * @param value\n     * @return\n     */\n    @Override\n    public Double zIncrBy(final String key, final double increment, final String value) {\n        return (Double) redisTemplate.execute((RedisCallback<Double>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            byte[] valueByte = stringRedisSerializer.serialize(value);\n            return connection.zIncrBy(keyByte, increment, valueByte);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(1) \u8fd4\u56de\u6709\u5e8f\u96c6 key \u7684\u57fa\u6570\u3002\n     *\n     * @param key\n     * @return\n     */\n    @Override\n    public Long zCard(final String key) {\n        return (Long) redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                RedisSerializer<String> stringRedisSerializer\n                        = redisTemplate.getStringSerializer();\n                byte[] keyByte = stringRedisSerializer.serialize(key);\n                return connection.zCard(keyByte);\n            }\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.0.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N))\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\u3002 \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\uff0c score \u503c\u5728 min \u548c max\n     * \u4e4b\u95f4(\u9ed8\u8ba4\u5305\u62ec score \u503c\u7b49\u4e8e min \u6216 max )\u7684\u6210\u5458\u7684\u6570\u91cf\u3002\n     *\n     * @param key\n     * @param range\n     * @return\n     */\n    @Override\n    public Long zCount(final String key, final RedisZSetCommands.Range range) {\n        return (Long) redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                RedisSerializer<String> stringRedisSerializer\n                        = redisTemplate.getStringSerializer();\n                byte[] keyByte = stringRedisSerializer.serialize(key);\n                return connection.zCount(keyByte, range);\n            }\n        });\n    }\n\n    @Override\n    public <T> Set<T> zRange(final String key, final long start, final long end, Class<T> clazz) {\n        return (Set<T>) redisTemplate.execute((RedisCallback<Set<T>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            Set<byte[]> bytes = connection.zRange(keyByte, start, end);\n            Set<T> set = new HashSet<>(bytes.size());\n            if (null != bytes) {\n                Gson gson = new GsonBuilder().disableHtmlEscaping().create();\n                for (byte[] b : bytes) {\n                    Object value = stringRedisSerializer.deserialize(b);\n                    if (null != value) {\n                        set.add(gson.fromJson(value.toString(), clazz));\n                    }\n                }\n            }\n            return set;\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)+M)\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c\u800c M \u4e3a\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002 \u8fd4\u56de\u6709\u5e8f\u96c6 key\n     * \u4e2d\uff0c\u6307\u5b9a\u533a\u95f4\u5185\u7684\u6210\u5458\u3002 \u5176\u4e2d\u6210\u5458\u7684\u4f4d\u7f6e\u6309 score \u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\u6765\u6392\u5e8f\u3002 \u5177\u6709\u76f8\u540c score \u503c\u7684\u6210\u5458\u6309\u5b57\u5178\u5e8f(lexicographical\n     * order )\u6765\u6392\u5217\u3002\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    @Override\n    public Set<byte[]> zRange(final String key, final long start, final long end) {\n        return (Set<byte[]>) redisTemplate.execute((RedisCallback<Set<byte[]>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRange(keyByte, start, end);\n        });\n    }\n\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)+M)\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c\u800c M \u4e3a\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002 \u8fd4\u56de\u6709\u5e8f\u96c6 key\n     * \u4e2d\uff0c\u6307\u5b9a\u533a\u95f4\u5185\u7684\u6210\u5458\u3002 \u5176\u4e2d\u6210\u5458\u7684\u4f4d\u7f6e\u6309 score \u503c\u9012\u51cf(\u4ece\u5927\u5230\u5c0f)\u6765\u6392\u5217\u3002 \u5177\u6709\u76f8\u540c score \u503c\u7684\u6210\u5458\u6309\u5b57\u5178\u5e8f\u7684\u9006\u5e8f(reverse\n     * lexicographical order)\u6392\u5217\u3002 \u9664\u4e86\u6210\u5458\u6309 score \u503c\u9012\u51cf\u7684\u6b21\u5e8f\u6392\u5217\u8fd9\u4e00\u70b9\u5916\uff0c ZREVRANGE \u547d\u4ee4\u7684\u5176\u4ed6\u65b9\u9762\u548c ZRANGE\n     * key start stop [WITHSCORES] \u547d\u4ee4\u4e00\u6837\u3002\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    @Override\n    public Set<byte[]> zRevRange(final String key, final long start, final long end) {\n        return (Set<byte[]>) redisTemplate.execute((RedisCallback<Set<byte[]>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRevRange(keyByte, start, end);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.0.5 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)+M)\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c M \u4e3a\u88ab\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002 \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\uff0c\u6240\u6709\n     * score \u503c\u4ecb\u4e8e min \u548c max \u4e4b\u95f4(\u5305\u62ec\u7b49\u4e8e min \u6216 max )\u7684\u6210\u5458\u3002\u6709\u5e8f\u96c6\u6210\u5458\u6309 score \u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\u6b21\u5e8f\u6392\u5217\u3002 \u5177\u6709\u76f8\u540c\n     * score \u503c\u7684\u6210\u5458\u6309\u5b57\u5178\u5e8f(lexicographical order)\u6765\u6392\u5217(\u8be5\u5c5e\u6027\u662f\u6709\u5e8f\u96c6\u63d0\u4f9b\u7684\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u8ba1\u7b97)\u3002\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    @Override\n    public Set<byte[]> zRangeByScore(final String key, final double min, final double max) {\n        return (Set<byte[]>) redisTemplate.execute((RedisCallback<Set<byte[]>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRangeByScore(keyByte, min, max);\n        });\n    }\n\n    /**\n     * \u6839\u636e\u7d22\u5f15\u533a\u95f4\u83b7\u53d6\u5143\u7d20\n     * score \u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    @Override\n    public Set<RedisZSetCommands.Tuple> zRangeWithScores(final String key, final long start, final long end) {\n        return (Set<RedisZSetCommands.Tuple>) redisTemplate.execute((RedisCallback<Set<RedisZSetCommands.Tuple>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRangeWithScores(keyByte, start, end);\n        });\n    }\n\n    /**\n     * \u6839\u636e\u7d22\u5f15\u533a\u95f4\u83b7\u53d6\u5143\u7d20\n     * score \u503c\u9012\u589e(\u4ece\u5927\u5230\u5c0f)\n     *\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    @Override\n    public Set<RedisZSetCommands.Tuple> zRevRangeWithScores(final String key, final long start, final long end) {\n        return (Set<RedisZSetCommands.Tuple>) redisTemplate.execute((RedisCallback<Set<RedisZSetCommands.Tuple>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRevRangeWithScores(keyByte, start, end);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)+M)\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c M \u4e3a\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002 \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\uff0c score\n     * \u503c\u4ecb\u4e8e max \u548c min \u4e4b\u95f4(\u9ed8\u8ba4\u5305\u62ec\u7b49\u4e8e max \u6216 min )\u7684\u6240\u6709\u7684\u6210\u5458\u3002\u6709\u5e8f\u96c6\u6210\u5458\u6309 score \u503c\u9012\u51cf(\u4ece\u5927\u5230\u5c0f)\u7684\u6b21\u5e8f\u6392\u5217\u3002 \u5177\u6709\u76f8\u540c\n     * score \u503c\u7684\u6210\u5458\u6309\u5b57\u5178\u5e8f\u7684\u9006\u5e8f(reverse lexicographical order )\u6392\u5217\u3002 \u9664\u4e86\u6210\u5458\u6309 score\n     * \u503c\u9012\u51cf\u7684\u6b21\u5e8f\u6392\u5217\u8fd9\u4e00\u70b9\u5916\uff0c ZREVRANGEBYSCORE \u547d\u4ee4\u7684\u5176\u4ed6\u65b9\u9762\u548c ZRANGEBYSCORE key min max\n     * [WITHSCORES] [LIMIT offset count] \u547d\u4ee4\u4e00\u6837\u3002\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    @Override\n    public Set<byte[]> zRevRangeByScore(final String key, final double min, final double max) {\n        return (Set<byte[]>) redisTemplate.execute((RedisCallback<Set<byte[]>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRevRangeByScore(keyByte, min, max);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)+M)\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c M \u4e3a\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002 \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\uff0c score\n     * \u503c\u4ecb\u4e8e max \u548c min \u4e4b\u95f4(\u9ed8\u8ba4\u5305\u62ec\u7b49\u4e8e max \u6216 min )\u7684\u6240\u6709\u7684\u6210\u5458\u3002\u6709\u5e8f\u96c6\u6210\u5458\u6309 score \u503c\u9012\u51cf(\u4ece\u5927\u5230\u5c0f)\u7684\u6b21\u5e8f\u6392\u5217\u3002 \u5177\u6709\u76f8\u540c\n     * score \u503c\u7684\u6210\u5458\u6309\u5b57\u5178\u5e8f\u7684\u9006\u5e8f(reverse lexicographical order )\u6392\u5217\u3002 \u9664\u4e86\u6210\u5458\u6309 score\n     * \u503c\u9012\u51cf\u7684\u6b21\u5e8f\u6392\u5217\u8fd9\u4e00\u70b9\u5916\uff0c ZREVRANGEBYSCORE \u547d\u4ee4\u7684\u5176\u4ed6\u65b9\u9762\u548c ZRANGEBYSCORE key min max\n     * [WITHSCORES] [LIMIT offset count] \u547d\u4ee4\u4e00\u6837\u3002\n     *\n     * @param key\n     * @param min\n     * @param max\n     * @return\n     */\n    @Override\n    public Set<byte[]> zRevRangeByScore(final String key, final double min, final double max, long offset, long count) {\n        return (Set<byte[]>) redisTemplate.execute((RedisCallback<Set<byte[]>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRevRangeByScore(keyByte, min, max, offset, count);\n        });\n    }\n\n    @Override\n    public Set<RedisZSetCommands.Tuple> zRangeWithScores(final String key, final double min, final double max, long offset, long count) {\n        return (Set<RedisZSetCommands.Tuple>) redisTemplate.execute((RedisCallback<Set<RedisZSetCommands.Tuple>>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRangeByScoreWithScores(keyByte, min, max, offset, count);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.0.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)) \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\u6210\u5458 member \u7684\u6392\u540d\u3002\u5176\u4e2d\u6709\u5e8f\u96c6\u6210\u5458\u6309 score\n     * \u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\u987a\u5e8f\u6392\u5217\u3002 \u6392\u540d\u4ee5 0 \u4e3a\u5e95\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c score \u503c\u6700\u5c0f\u7684\u6210\u5458\u6392\u540d\u4e3a 0 \u3002 \u4f7f\u7528 ZREVRANK key member\n     * \u547d\u4ee4\u53ef\u4ee5\u83b7\u5f97\u6210\u5458\u6309 score \u503c\u9012\u51cf(\u4ece\u5927\u5230\u5c0f)\u6392\u5217\u7684\u6392\u540d\u3002\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    @Override\n    public Long zRank(final String key, final String value) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            byte[] valueByte = stringRedisSerializer.serialize(value);\n            return connection.zRank(keyByte, valueByte);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.0.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(log(N)) \u8fd4\u56de\u6709\u5e8f\u96c6 key \u4e2d\u6210\u5458 member \u7684\u6392\u540d\u3002\u5176\u4e2d\u6709\u5e8f\u96c6\u6210\u5458\u6309 score\n     * \u503c\u9012\u51cf(\u4ece\u5927\u5230\u5c0f)\u6392\u5e8f\u3002 \u6392\u540d\u4ee5 0 \u4e3a\u5e95\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c score \u503c\u6700\u5927\u7684\u6210\u5458\u6392\u540d\u4e3a 0 \u3002 \u4f7f\u7528 ZRANK key member \u547d\u4ee4\u53ef\u4ee5\u83b7\u5f97\u6210\u5458\u6309\n     * score \u503c\u9012\u589e(\u4ece\u5c0f\u5230\u5927)\u6392\u5217\u7684\u6392\u540d\u3002\n     *\n     * @param key\n     * @param score\n     * @param value\n     * @return\n     */\n    @Override\n    public Long zRevRank(final String key, final double score, final String value) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer<String> stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            byte[] valueByte = stringRedisSerializer.serialize(value);\n            return connection.zRevRank(keyByte, valueByte);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(M*log(N))\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c M \u4e3a\u88ab\u6210\u529f\u79fb\u9664\u7684\u6210\u5458\u7684\u6570\u91cf\u3002 \u79fb\u9664\u6709\u5e8f\u96c6 key\n     * \u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458\uff0c\u4e0d\u5b58\u5728\u7684\u6210\u5458\u5c06\u88ab\u5ffd\u7565\u3002 \u5f53 key \u5b58\u5728\u4f46\u4e0d\u662f\u6709\u5e8f\u96c6\u7c7b\u578b\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    @Override\n    public Long zRem(final String key, final String value) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            byte[] valueByte = stringRedisSerializer.serialize(value);\n            return connection.zRem(keyByte, valueByte);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(M*log(N))\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c M \u4e3a\u88ab\u6210\u529f\u79fb\u9664\u7684\u6210\u5458\u7684\u6570\u91cf\u3002 \u79fb\u9664\u6709\u5e8f\u96c6 key\n     * \u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6210\u5458\uff0c\u4e0d\u5b58\u5728\u7684\u6210\u5458\u5c06\u88ab\u5ffd\u7565\u3002 \u5f53 key \u5b58\u5728\u4f46\u4e0d\u662f\u6709\u5e8f\u96c6\u7c7b\u578b\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\n     *\n     * @param key\n     * @param fields \u5220\u9664\u591a\u6570\u636e\n     * @return\n     */\n    @Override\n    public Long zMRem(final String key, final List<String> fields) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keys = stringRedisSerializer.serialize(key);\n            List<byte[]> values = new ArrayList<>(fields.size());\n            for (String field : fields) {\n                byte[] value = stringRedisSerializer.serialize(field);\n                values.add(value);\n            }\n            byte[][] valueArr = new byte[values.size()][];\n            return connection.zRem(keys,\n                    values.toArray(valueArr));\n\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 1.2.0 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(log(N)+M)\uff0c N \u4e3a\u6709\u5e8f\u96c6\u7684\u57fa\u6570\uff0c\u800c M \u4e3a\u88ab\u79fb\u9664\u6210\u5458\u7684\u6570\u91cf\u3002 \u79fb\u9664\u6709\u5e8f\u96c6 key \u4e2d\uff0c\u6240\u6709\n     * score \u503c\u4ecb\u4e8e min \u548c max \u4e4b\u95f4(\u5305\u62ec\u7b49\u4e8e min \u6216 max )\u7684\u6210\u5458\u3002 \u81ea\u7248\u672c2.1.6\u5f00\u59cb\uff0c score \u503c\u7b49\u4e8e min \u6216 max\n     * \u7684\u6210\u5458\u4e5f\u53ef\u4ee5\u4e0d\u5305\u62ec\u5728\u5185\uff0c\u8be6\u60c5\u8bf7\u53c2\u89c1 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n     * \u547d\u4ee4\u3002\n     *\n     * @param key\n     * @param range\n     * @return\n     */\n    @Override\n    public Long zRemRangeByScore(final String key, final RedisZSetCommands.Range range) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRemRangeByScore(keyByte, range);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.8.9 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(log(N)+M)\uff0c \u5176\u4e2d N \u4e3a\u6709\u5e8f\u96c6\u5408\u7684\u5143\u7d20\u6570\u91cf\uff0c \u800c M \u5219\u662f\u547d\u4ee4\u8fd4\u56de\u7684\u5143\u7d20\u6570\u91cf\u3002 \u5982\u679c M\n     * \u662f\u4e00\u4e2a\u5e38\u6570\uff08\u6bd4\u5982\u8bf4\uff0c\u7528\u6237\u603b\u662f\u4f7f\u7528 LIMIT \u53c2\u6570\u6765\u8fd4\u56de\u6700\u5148\u7684 10 \u4e2a\u5143\u7d20\uff09\uff0c \u90a3\u4e48\u547d\u4ee4\u7684\u590d\u6742\u5ea6\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f O(log(N)) \u3002\n     * \u5f53\u6709\u5e8f\u96c6\u5408\u7684\u6240\u6709\u6210\u5458\u90fd\u5177\u6709\u76f8\u540c\u7684\u5206\u503c\u65f6\uff0c \u6709\u5e8f\u96c6\u5408\u7684\u5143\u7d20\u4f1a\u6839\u636e\u6210\u5458\u7684\u5b57\u5178\u5e8f\uff08lexicographical ordering\uff09\u6765\u8fdb\u884c\u6392\u5e8f\uff0c\n     * \u800c\u8fd9\u4e2a\u547d\u4ee4\u5219\u53ef\u4ee5\u8fd4\u56de\u7ed9\u5b9a\u7684\u6709\u5e8f\u96c6\u5408\u952e key \u4e2d\uff0c \u503c\u4ecb\u4e8e min \u548c max \u4e4b\u95f4\u7684\u6210\u5458\u3002 \u5982\u679c\u6709\u5e8f\u96c6\u5408\u91cc\u9762\u7684\u6210\u5458\u5e26\u6709\u4e0d\u540c\u7684\u5206\u503c\uff0c\n     * \u90a3\u4e48\u547d\u4ee4\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u672a\u6307\u5b9a\u7684\uff08unspecified\uff09\u3002\n     *\n     * @param key\n     * @param range\n     * @return\n     */\n    @Override\n    public Set<byte[]> zRangeByLex(final String key, final RedisZSetCommands.Range range) {\n        return (Set<byte[]>) redisTemplate.execute((RedisCallback<Set<byte[]>>) connection -> {\n            RedisSerializer stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] keyByte = stringRedisSerializer.serialize(key);\n            return connection.zRangeByLex(keyByte, range);\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a>= 2.0.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(N)+O(M log(M))\uff0c N \u4e3a\u7ed9\u5b9a\u6709\u5e8f\u96c6\u57fa\u6570\u7684\u603b\u548c\uff0c M \u4e3a\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002\n     * \u8ba1\u7b97\u7ed9\u5b9a\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u5e8f\u96c6\u7684\u5e76\u96c6\uff0c\u5176\u4e2d\u7ed9\u5b9a key \u7684\u6570\u91cf\u5fc5\u987b\u4ee5 numkeys \u53c2\u6570\u6307\u5b9a\uff0c\u5e76\u5c06\u8be5\u5e76\u96c6(\u7ed3\u679c\u96c6)\u50a8\u5b58\u5230 destination \u3002\n     * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u96c6\u4e2d\u67d0\u4e2a\u6210\u5458\u7684 score \u503c\u662f\u6240\u6709\u7ed9\u5b9a\u96c6\u4e0b\u8be5\u6210\u5458 score \u503c\u4e4b \u548c \u3002\n     *\n     * @param destKey\n     * @param sets\n     * @return\n     */\n    @Override\n    public Long zUnionStore(final String destKey, List<String> sets) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] destKeyByte = stringRedisSerializer.serialize(destKey);\n            byte[][] arr = new byte[sets.size()][];\n            return connection.zUnionStore(destKeyByte, sets.parallelStream()\n                    .map(val -> stringRedisSerializer.serialize(val)).collect(Collectors.toList()).toArray(arr));\n        });\n    }\n\n    /**\n     * \u53ef\u7528\u7248\u672c\uff1a >= 2.0.0 \u65f6\u95f4\u590d\u6742\u5ea6: O(N*K)+O(M*log(M))\uff0c N \u4e3a\u7ed9\u5b9a key \u4e2d\u57fa\u6570\u6700\u5c0f\u7684\u6709\u5e8f\u96c6\uff0c K \u4e3a\u7ed9\u5b9a\u6709\u5e8f\u96c6\u7684\u6570\u91cf\uff0c M\n     * \u4e3a\u7ed3\u679c\u96c6\u7684\u57fa\u6570\u3002 \u8ba1\u7b97\u7ed9\u5b9a\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6709\u5e8f\u96c6\u7684\u4ea4\u96c6\uff0c\u5176\u4e2d\u7ed9\u5b9a key \u7684\u6570\u91cf\u5fc5\u987b\u4ee5 numkeys \u53c2\u6570\u6307\u5b9a\uff0c\u5e76\u5c06\u8be5\u4ea4\u96c6(\u7ed3\u679c\u96c6)\u50a8\u5b58\u5230\n     * destination \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u96c6\u4e2d\u67d0\u4e2a\u6210\u5458\u7684 score \u503c\u662f\u6240\u6709\u7ed9\u5b9a\u96c6\u4e0b\u8be5\u6210\u5458 score \u503c\u4e4b\u548c.\n     *\n     * @param destKey\n     * @param sets\n     * @return\n     */\n    @Override\n    public Long zInterStore(final String destKey, final byte[]... sets) {\n        return (Long) redisTemplate.execute((RedisCallback<Long>) connection -> {\n            RedisSerializer stringRedisSerializer\n                    = redisTemplate.getStringSerializer();\n            byte[] destKeyByte = stringRedisSerializer.serialize(destKey);\n            return connection.zInterStore(destKeyByte, sets);\n        });\n    }\n\n    /**\n     * zset\u5206\u9875\u65b9\u6cd5\n     *\n     * @param key          \u7f13\u5b58key\n     * @param sortTypeEnum \u6392\u5e8f\u65b9\u5f0f\n     * @param pageSize     \u5206\u9875\u5927\u5c0f\n     * @param pageIndex    \u9875\u7801\n     * @param clazz        \u5143\u7d20\u7c7b\u578b\n     * @return\n     */\n    @Override\n    public <T> Search zSetSearchPage(String key, SortTypeEnum sortTypeEnum, int pageSize, int pageIndex, Class<T> clazz) {\n        Search search = new Search();\n        search.setPageIndex(pageIndex);\n        search.setPageSize(pageSize);\n        search.buildPage();\n        if (pageSize == 0) {\n            return search;\n        }\n        RedisSerializer stringRedisSerializer\n                = redisTemplate.getStringSerializer();\n        Gson gson = new Gson();\n        // \u83b7\u53d6\u603b\u6761\u6570\n        Long totalCount = zCount(key, RedisZSetCommands.Range.unbounded());\n        // \u603b\u9875\u6570\n        Long totalPageCount = totalCount / pageSize;\n        Long pageNum = (totalCount % pageSize) == 0 ? totalPageCount : totalPageCount + 1;\n        // \u5224\u65ad\u662f\u5426\u9700\u8981\u53bb\u6267\u884c\uff0c\u5f53\u603b\u9875\u6570<\u53d6\u6570\u9875\u65f6\u4e0d\u9700\u8981\u53bb\u6267\u884c\n        if (pageNum >= pageIndex) {\n            int offset = search.getOffset();\n            // \u4e0e\u6570\u636e\u5e93\u4e0d\u540c\uff0credis\u4ece0\u5f00\u59cb\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7ed3\u675f\u7684\u4e0b\u6807\n            int endIndex = offset + search.getPageSize() - 1;\n            Set<byte[]> zSetRange = null;\n            if (sortTypeEnum == SortTypeEnum.DESC) {\n                zSetRange = zRevRange(key, offset, endIndex);\n            } else {\n                zSetRange = zRange(key, offset, endIndex);\n            }\n            Set<T> list = new HashSet<>();\n            list = (Set<T>) Optional.ofNullable(zSetRange).orElseGet(() -> Collections.emptySet()\n            ).stream().filter(Objects::nonNull).map(i -> {\n                return gson.fromJson((String) stringRedisSerializer.deserialize(i), clazz);\n            }).collect(Collectors.toList());\n            search.setTotal(totalCount.intValue());\n            search.setResult(Arrays.asList(list));\n        }\n        return search;\n    }\n\n}\n\n")))}S.isMDXComponent=!0}}]);